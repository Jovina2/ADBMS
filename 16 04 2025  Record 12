1.Write a MongoDB query to create an INVOICE database and collections (CUSTOMER, PRODUCT) and its corresponding documents.

test> use INVOICE
switched to db INVOICE
INVOICE> db.CUSTOMER.insertMany([
... {
... customer_id:1,name:"Jacob",city:"Newyork",email:"jacob@example.com"
... },
... {
... customer_id:2,name:"Ann",city:"Us",email:"ann@example.com"
... }
... ]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('67ff709e9de7be2793ef634b'),
    '1': ObjectId('67ff709e9de7be2793ef634c')
  }
}

INVOICE> db.PRODUCT.insertMany([
... {
... product_id:101,name:"Laptop",price:12000
... },
... {
... product_id:102,name:"Mouse",price:200
... }
... ]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('67ff713c9de7be2793ef634d'),
    '1': ObjectId('67ff713c9de7be2793ef634e')
  }
}


2.Write a MongoDB query to find all documents from the collection CUSTOMER

INVOICE> db.CUSTOMER.find()
[
  {
    _id: ObjectId('67ff709e9de7be2793ef634b'),
    customer_id: 1,
    name: 'Jacob',
    city: 'Newyork',
    email: 'jacob@example.com'
  },
  {
    _id: ObjectId('67ff709e9de7be2793ef634c'),
    customer_id: 2,
    name: 'Ann',
    city: 'Us',
    email: 'ann@example.com'
  }
]

3.Write a MongoDB query to update the city in the collection CUSTOMER.

INVOICE> db.CUSTOMER.updateOne(
... {
... customer_id:1
... },
... {$set:{city:"Chicago"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
INVOICE> db.CUSTOMER.find({customer_id:1}).pretty()
[
  {
    _id: ObjectId('67ff709e9de7be2793ef634b'),
    customer_id: 1,
    name: 'Jacob',
    city: 'Chicago',
    email: 'jacob@example.com'
  },
  {
    _id: ObjectId('67ff709e9de7be2793ef634c'),
    customer_id: 2,
    name: 'Ann',
    city: 'Us',
    email: 'ann@example.com'
  }
]

4.Write a MongoDB query to delete the first matched document whose city is “US”.

INVOICE> db.CUSTOMER.deleteOne({city:"Us"})
{ acknowledged: true, deletedCount: 1 }


//VERIFIED
