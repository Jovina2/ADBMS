a) ACCESSING DATABASE:  (SELECT, Filtering using WHERE, ORDER BY Clauses)
1.List all invoice items, avoid duplicates.

mysql> select * from invoice_item;
+--------+------+----------+
| inv_id | pid  | quantity |
+--------+------+----------+
|    101 | 1001 |        1 |
|    102 | 1002 |        1 |
|    102 | 1004 |        2 |
|    103 | 1003 |        5 |
|    104 | 1002 |        3 |
+--------+------+----------+
5 rows in set (0.00 sec)

mysql> select distinct inv_id from invoice_item;
+--------+
| inv_id |
+--------+
|    101 |
|    102 |
|    103 |
|    104 |
+--------+
4 rows in set (0.00 sec)

2.List the invoice details from 1st January 2024 to 31st march 2024

mysql> select * from invoice_master where inv_date between '2024-01-01' and '2024-03-31';
+--------+---------+------------+
| inv_id | cust_id | inv_date   |
+--------+---------+------------+
|    103 |   10003 | 2024-03-05 |
+--------+---------+------------+
1 row in set (0.00 sec)

3.List the customer details who not live in ‘tvm’.

mysql> select * from CUSTOMER where city <> 'tvm';
+-------+---------+-------------+---------+------------+
| id    | name    | address     | city    | ph_no      |
+-------+---------+-------------+---------+------------+
| 10001 | John    | Springfield | calicut | 1234567890 |
| 10002 | Jane    | kakkanad    | ekm     |       NULL |
| 10004 | Alice   | Oak Rd      | ekm     |       NULL |
| 10005 | Charlie | Maple Ave   | wyd     |  567890123 |
+-------+---------+-------------+---------+------------+
4 rows in set (0.00 sec)

4.List the customers who have no phone number.

mysql> select * from CUSTOMER where ph_no IS NULL;
+-------+-------+----------+------+-------+
| id    | name  | address  | city | ph_no |
+-------+-------+----------+------+-------+
| 10002 | Jane  | kakkanad | ekm  |  NULL |
| 10004 | Alice | Oak Rd   | ekm  |  NULL |
+-------+-------+----------+------+-------+
2 rows in set (0.00 sec)

5.Display customer names in descending order.

mysql> select name from  CUSTOMER order by name desc;
+---------+
| name    |
+---------+
| John    |
| Jane    |
| Charlie |
| Bob     |
| Alice   |
+---------+
5 rows in set (0.00 sec)


6.Display the customer details sorted in ascending by city and descending by names.

mysql> select name,city from CUSTOMER ORDER BY city asc,name desc;
+---------+---------+
| name    | city    |
+---------+---------+
| John    | calicut |
| Jane    | ekm     |
| Alice   | ekm     |
| Bob     | tvm     |
| Charlie | wyd     |
+---------+---------+
5 rows in set (0.00 sec)

5 rows in set (0.00 sec)

7.Find the customer names who have ‘e’ or ‘a’ in them and at least 3 characters in length

mysql> select distinct name from CUSTOMER where(name like '%e%' or name like '%a%') and length(name) >= 3;
+---------+
| name    |
+---------+
| Jane    |
| Alice   |
| Charlie |
+---------+
3 rows in set (0.01 sec)

8.List the names of customers their names have ‘o’ in second position.

mysql> select distinct name from CUSTOMER where(name like '_o%');
+------+
| name |
+------+
| John |
| Bob  |
+------+
2 rows in set (0.01 sec)

b) OPTIMIZING DATABASE:  (GROUP BY, AGGREGATE FUNCTIONS)

1.List product name, price except soap on price order.

mysql> select pname,price from PRODUCT where pname != 'soap' order by price;
+----------+-------+
| pname    | price |
+----------+-------+
| Pen      |    51 |
| Pencil   |    87 |
| Eraser   |   122 |
| Notebook |   148 |
+----------+-------+
4 rows in set (0.00 sec)

2.Find minimum, maximum and average price of products.

mysql> select min(price) as minimum_price,max(price) as maximum_price,avg(price) as average_price from PRODUCT;
+---------------+---------------+---------------+
| minimum_price | maximum_price | average_price |
+---------------+---------------+---------------+
|            51 |           148 |      102.0000 |
+---------------+---------------+---------------+
1 row in set (0.00 sec)

3.Find number of customers in each city.

mysql> select count(city) from CUSTOMER group by city;
+-------------+
| count(city) |
+-------------+
|           1 |
|           2 |
|           1 |
|           1 |
+-------------+
4 rows in set (0.02 sec)

4.Find number of customers in each city, only include city with more than 3 customers.

mysql> select count(city) from CUSTOMER group by city having count(*) >3;
+-------------+
| count(city) |
+-------------+
|           4 |
+-------------+
1 row in set (0.00 sec)

5.Show data as displayed ‘who, where’ Eg: ‘customer1 lives in ekm’

mysql> SELECT CONCAT(name, ' lives in ', city) AS cust_location FROM CUSTOMER;
+-----------------------+
| cust_location         |
+-----------------------+
| John lives in calicut |
| Jane lives in ekm     |
| Bob lives in tvm      |
| Alice lives in ekm    |
| Charlie lives in wyd  |
| Joe lives in ekm      |
| abc lives in ekm      |
+-----------------------+
7 rows in set (0.00 sec)


